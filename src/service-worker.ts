/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";
import urlB64ToUint8Array from "./utils/GenerateVapidKeys";
import { messaging } from "./Domain/ExternalService/FirebaseApp";
import { onMessage } from "firebase/messaging";
import { onBackgroundMessage } from "firebase/messaging/sw";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  console.log("message", event);
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// const showLocalNotification = (
//   title: string,
//   body: any,
//   swRegistration: any
// ) => {
//   const options = {
//     body,
//     // here you can add more properties like icon, image, vibrate, etc.
//   };
//   swRegistration.showNotification(title, options);
// };

// const saveSubscription = async (subscription: any) => {
//   const SERVER_URL = `${process.env.REACT_APP_BASE_API_URL}/subscription`;
//   const response = await fetch(SERVER_URL, {
//     method: "post",
//     headers: {
//       "Content-Type": "application/json",
//     },
//     body: JSON.stringify(subscription),
//   });
//   return response.json();
// };

// self.addEventListener("activate", async () => {
//   // This will be called only once when the service worker is activated.
//   console.log("service worker activate");
//   try {
//     const applicationServerKey = urlB64ToUint8Array(
//       "BJ5IxJBWdeqFDJTvrZ4wNRu7UY2XigDXjgiUBYEYVXDudxhEs0ReOJRBcBHsPYgZ5dyV8VjyqzbQKS8V7bUAglk"
//     );
//     const options = { applicationServerKey, userVisibleOnly: true };
//     const subscription = await self.registration.pushManager.subscribe(options);
//     const response = await saveSubscription(subscription);
//     console.log(response);
//     console.log(JSON.stringify(subscription));
//   } catch (err) {
//     console.log("Error", err);
//   }
// });

// //  push notification
// self.addEventListener("push", (event) => {
//   if (event.data) {
//     console.log("Push event!! ", event.data.text());
//     showLocalNotification("Yolo", event.data.text(), self.registration);
//   } else {
//     console.log("Push event but no data");
//   }
// });

// firebase messaging

onBackgroundMessage(messaging, (payload) => {
  console.log("Received background message ", payload);
  // Customize notification here
  const notificationTitle = "Background Message Title";
  const notificationOptions = {
    body: "Background Message body.",
  };

  self?.registration?.showNotification(notificationTitle, notificationOptions);
});

onMessage(messaging, (payload) => {
  console.log("Message received. ", payload);
  // ...
});
